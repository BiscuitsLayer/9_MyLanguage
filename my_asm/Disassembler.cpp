#include "Disassembler.h"
#include "data/program.commands"

void DisassemblerMain () {
    FILE *program_code = fopen ("program_data/program.code", "rb"); //Машинный код
    fseek (program_code, 0, SEEK_END);
    size_t program_len = ftell (program_code); //Ввод длины машинного кода
    fseek (program_code, 0, SEEK_SET);
    program_len /= sizeof (int);

    int *code = nullptr; //Массив машинного кода дизассемблера
    Label_t *labels = (Label_t *) calloc (LABEL_ARRAY_SIZE, sizeof (Label_t));

    LoadData (&code, program_code, program_len); //Загрузка машинного кода в дизассемблер
    fclose (program_code);

    /*//Вывод машинного кода, принятого дизассемблером
    printf ("PROGRAM LOADED:\n");
    for (int i = 0; i < program_len; ++i)
        printf ("%d ", code[i]);
    printf ("\nEND OF PROGRAM\n");
    */

    FILE *disasm_decode = fopen ("user_data/disasm.decode", "w");
    DataHandle (code, disasm_decode, program_len, labels); //Обработка машинного кода
    fclose (disasm_decode);

    free (labels);
    free (code);
}

void LoadData (int **code, FILE *program_code, size_t program_len) {
   *code = (int *) calloc (program_len, sizeof (int)); //Выделение памяти под машинный код
    fread (*code, sizeof(int), program_len, program_code); //Чтение машинного кода
}

void DataHandle (int *code, FILE *disasm_decode, size_t program_len, Label_t *labels) {
    size_t idx = 0; //Индекс в массиве машинного кода
    size_t labels_size = 0; //Размер массива меток

    for (idx = 0; idx < program_len; ++idx) {
        switch (code[idx]) { //Обработка машинного кода
            #include "data/program.lang"
            #define DEF_CMD(name, num, code) \
            case CMD_##name COLON { fprintf(disasm_decode, #name" "); break; }
            #include "data/program.operations"
            #undef DEF_CMD
        }

        if (code[idx] == CMD_PUSH)
            fprintf (disasm_decode, "%d\n", (int)(code[idx += 1] / pow (10, ACCURACY)));
        /*
        #define DEF_JMP(name) else if (code[idx] == CMD_##name) {                           \
            ++idx;                                                                          \
            bool label_found = false;                                                       \
            for (size_t label_idx = 0; label_idx < labels_size; ++label_idx) {              \
                if (labels[label_idx].num == code[idx]) {                                   \
                    fprintf (disasm_decode, labels[label_idx].name);                        \
                    label_found = true;                                                     \
                    break;                                                                  \
                }                                                                           \
            }                                                                               \
                                                                                            \
            if (!label_found) {                                                             \
                labels[labels_size].name = (char *) calloc (LABEL_STR_LEN, sizeof (char));  \
                strcat (labels[labels_size].name, "label");                                 \
                labels[labels_size].name[LABEL_WORD_LEN] = (char)(labels_size + 1 + '0');   \
                labels[labels_size].name[LABEL_WORD_LEN + 1] = '\0';                        \
                labels[labels_size].num = idx + 1;                                          \
                fprintf (disasm_decode, labels[labels_size].name);                          \
                ++labels_size;                                                              \
            }                                                                               \
                                                                                            \
            fprintf (disasm_decode, "\n");                                                  \
        }                                                                                   \

        DEF_JMP(JMP)
        DEF_JMP(JA)
        DEF_JMP(JAE)
        DEF_JMP(JB)
        DEF_JMP(JBE)
        DEF_JMP(JE)
        DEF_JMP(JNE)
        DEF_JMP(CALL)

        #undef DEF_JMP
        */
        else
            fprintf (disasm_decode, "\n");
    }
    fprintf (disasm_decode, "//THIS FILE IS AUTOGENERATED//");
}